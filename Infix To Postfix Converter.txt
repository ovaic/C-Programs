#include<stdio.h>
#include<ctype.h>

char stack[100];
int top = -1;

void push(char x)
{
    stack[++top] = x;
}

char pop()
{
    if(top == -1)
        return -1;
    else
        return stack[top--];
}

int priority(char x)
{
    if(x == '(')
        return 0;
    if(x == '+' || x == '-')
        return 1;
    if(x == '*' || x == '/')
        return 2;
    return 0;
}

int main()
{
    char exp[100];
    char *e, x;
    printf("Enter the expression : ");
    scanf("%s",exp);
    printf("\n");
    e = exp;

    while(*e != '\0')
    {
        if(isalnum(*e))
            printf("%c ",*e);
        else if(*e == '(')
            push(*e);
        else if(*e == ')')
        {
            while((x = pop()) != '(')
                printf("%c ", x);
        }
        else
        {
            while(priority(stack[top]) >= priority(*e))
                printf("%c ",pop());
            push(*e);
        }
        e++;
    }

    while(top != -1)
    {
        printf("%c ",pop());
    }return 0;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include<stdio.h>
#include<string.h>
#include<ctype.h>

#define SIZE 100

void push(char stack[], char x, int *tp);
int pop(char stack[], int *tp);
int isFull(char stack[], int *tp);
int isEmpty(char stack[], int *tp);
void convertToPostfix(char infx[], char pfx[]);
int precedence(char x);

int main()
{

    char infx[SIZE], pfx[SIZE];
    printf("Enter the Infix Expression (WITHOUT SPACES): ");
    gets(infx);
    convertToPostfix(infx, pfx);
    printf("\nPostfix expression: %s\n",pfx);

    return 0;
}

void convertToPostfix(char infx[], char pfx[])
{
    char stack[SIZE] = {0};
    char x, y;
    int top = -1, *tp = &top;
    int i, j;
    j = 0;

    for(i=0; infx[i] != '\0'; i++)
        {
            x = infx[i];
            if(isalnum(x))
                pfx[j++] = x;
            else if(x == '(')
               push(stack,'(', tp);
            else if(x == ')')
            {
                while((y = pop(stack, tp)) != '(')
                    pfx[j++] = y;
            }
            else
            {
                while(precedence(x) <= precedence(stack[*tp]) && *tp != -1)
                      {
                        y = pop(stack, tp);
                        pfx[j++] = y;
                      }
                push(stack, x, tp);
            }

        }

        while(*tp != -1)
        {
            y = pop(stack, tp);
            pfx[j++] = y;
        }
        pfx[j]='\0';
}

int precedence(char x)
{
    if(x == '(')
        return 0;
    if(x == '+' || x == '-')
        return 1;
    if(x == '*' || x == '/')
        return 2;
    return 0;
}

void push(char stack[], char x, int *tp)
{
    if(isFull(stack, tp))
    {
        printf("Stack overflow\n");
    }
    else
    {
        *tp = *tp + 1;
        //printf("Top is on %d\n", *tp);
        stack[*tp] = x;
        //printf("Element %c pushed into stack.\n", x);
    }
}

int pop(char stack[], int *tp)
{
    if(isEmpty(stack, tp))
    {
        printf("Stack is empty\n");
        //return -9999;
    }
    else
    {
        char u = stack[*tp];
        *tp = *tp - 1;
        //printf("\nElement %c popped from stack.\n", u);
        //printf("Top is on %d\n", *tp);
        return u;
    }
}

int isFull(char stack[], int *tp)
{
    return (*tp==SIZE-1);
}

int isEmpty(char stack[], int *tp)
{
    return (*tp == -1);
}
